.\" Man page generated from reStructuredText.
.
.TH "MPI_WAIT" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Wait\fP — Waits for an MPI send or receive to complete.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Wait(MPI_Request *request, MPI_Status *status)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_WAIT(REQUEST, STATUS, IERROR)
     INTEGER REQUEST, STATUS(MPI_STATUS_SIZE), IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Wait(request, status, ierror)
     TYPE(MPI_Request), INTENT(INOUT) :: request
     TYPE(MPI_Status) :: status
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBrequest\fP: Request (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBstatus\fP: Status object (status).
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
A call to \fI\%MPI_Wait\fP returns when the operation identified by request is
complete. If the communication object associated with this request was
created by a nonblocking send or receive call, then the object is
deallocated by the call to \fI\%MPI_Wait\fP and the request handle is set to
\fBMPI_REQUEST_NULL\fP\&.
.sp
The call returns, in status, information on the completed
operation. The content of the status object for a receive operation
can be accessed as described in the “Return Status” subsection of the
“Point\-to\-Point Communication” chapter in the \fI\%MPI Standard\fP\&.  The status object for a send
operation may be queried by a call to \fI\%MPI_Test_cancelled\fP (see
the “Probe and Cancel” section in the \fI\%MPI Standard\fP).
.sp
If your application does not need to examine the \fIstatus\fP field, you can
save resources by using the predefined constant \fBMPI_STATUS_IGNORE\fP as a
special value for the \fIstatus\fP argument.
.sp
One is allowed to call \fI\%MPI_Wait\fP with a null or inactive request
argument. In this case the operation returns immediately with empty
status.
.SH NOTES
.sp
Successful return of \fI\%MPI_Wait\fP after an \fI\%MPI_Ibsend\fP implies that the user
send buffer can be reused i.e., data has been sent out or copied into a
buffer attached with \fI\%MPI_Buffer_attach\fP\&. Note that, at this point, we can
no longer cancel the send (for more information, see the “Probe and
Cancel” section in the \fI\%MPI Standard\fP).  If a matching receive is never
posted, then the buffer cannot be freed. This runs somewhat counter to
the stated goal of \fI\%MPI_Cancel\fP (always being able to free program space
that was committed to the communication subsystem).
.sp
Example: Simple usage of nonblocking operations and \fI\%MPI_Wait\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
CALL MPI_COMM_RANK(comm, rank, ierr)
IF(rank == 0) THEN
    CALL MPI_ISEND(a(1), 10, MPI_REAL, 1, tag, comm, request, ierr)
    **** do some computation ****
    CALL MPI_WAIT(request, status, ierr)
ELSE IF (rank == 1) THEN
    CALL MPI_IRECV(a(1), 15, MPI_REAL, 0, tag, comm, request, ierr)
    **** do some computation ****
    CALL MPI_WAIT(request, status, ierr)
END IF
.ft P
.fi
.UNINDENT
.UNINDENT
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
Note that per the “Return Status” section in the “Point\-to\-Point
Communication” chapter in the \fI\%MPI Standard\fP, MPI errors on requests passed to
\fI\%MPI_Wait\fP do not set the \fBstatus.MPI_ERROR\fP field in the
returned \fIstatus\fP\&.  The error code is always passed to the back\-end
error handler and may be passed back to the caller through the return
value of \fI\%MPI_Wait\fP if the back\-end error handler returns it.  The
pre\-defined MPI error handler \fBMPI_ERRORS_RETURN\fP exhibits this
behavior, for example.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Test\fP
.IP \(bu 2
\fI\%MPI_Testall\fP
.IP \(bu 2
\fI\%MPI_Testany\fP
.IP \(bu 2
\fI\%MPI_Testsome\fP
.IP \(bu 2
\fI\%MPI_Waitall\fP
.IP \(bu 2
\fI\%MPI_Waitany\fP
.IP \(bu 2
\fI\%MPI_Waitsome\fP
.IP \(bu 2
\fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

.\" Man page generated from reStructuredText.
.
.TH "MPI_WIN_FENCE" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Win_fence\fP â€” Synchronizes RMA calls on a window.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Win_fence(int assert, MPI_Win win)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_WIN_FENCE(ASSERT, WIN, IERROR)
     INTEGER ASSERT, WIN, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Win_fence(assert, win, ierror)
     INTEGER, INTENT(IN) :: assert
     TYPE(MPI_Win), INTENT(IN) :: win
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBassert\fP: Program assertion (integer).
.IP \(bu 2
\fBwin\fP: Window object (handle).
.UNINDENT
.SH OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Win_fence\fP synchronizes RMA calls on \fIwin\fP\&. The call is collective on
the group of \fIwin\fP\&. All RMA operations on \fIwin\fP originating at a given
process and started before the fence call will complete at that process
before the fence call returns. They will be completed at their target
before the fence call returns at the target. RMA operations on \fIwin\fP
started by a process after the fence call returns will access their
target window only after \fI\%MPI_Win_fence\fP has been called by the target
process.
.sp
The call completes an RMA access epoch if it was preceded by another
fence call and the local process issued RMA communication calls on \fIwin\fP
between these two calls. The call completes an RMA exposure epoch if it
was preceded by another fence call and the local window was the target
of RMA accesses between these two calls. The call starts an RMA access
epoch if it is followed by another fence call and by RMA communication
calls issued between these two fence calls. The call starts an exposure
epoch if it is followed by another fence call and the local window is
the target of RMA accesses between these two fence calls. Thus, the
fence call is equivalent to calls to a subset of \fIpost, start, complete,
wait\fP\&.
.sp
The \fIassert\fP argument is used to provide assertions on the context of
.sp
the call that may be used for various optimizations. A value of \fIassert\fP
^ 0 is always valid. The following assertion value is supported:
.INDENT 0.0
.TP
.B MPI_MODE_NOPRECEDE
No local RMA calls have been issued before this fence. This assertion
must be provided by all or no members of the group of the window. It
may enable faster fence call by avoiding unnecessary synchronization.
.TP
.B MPI_MODE_NOSTORE
Informs that the local window was not updated by local stores or get
calls in the preceding epoch.
.TP
.B MPI_MODE_NOPUT
Informs that the local window will not be updated by any put or
accummulate calls in the ensuing epoch (until next fence call).
.TP
.B MPI_MODE_NOSUCCEED
No local RMA calls will be issued after this fence. This assertion
must be provided by all or no members of the group of the window. It
may enable faster fence call by avoiding unnecessary synchronization.
.UNINDENT
.SH NOTE
.sp
Calls to \fI\%MPI_Win_fence\fP should both precede and follow calls to put, get
or accumulate that are synchronized with fence calls.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Win_create\fP
.IP \(bu 2
\fI\%MPI_Win_start\fP
.IP \(bu 2
\fI\%MPI_Win_post\fP
.IP \(bu 2
\fI\%MPI_Win_complete\fP
.IP \(bu 2
\fI\%MPI_Win_wait\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

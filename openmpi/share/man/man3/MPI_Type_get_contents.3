.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_GET_CONTENTS" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Type_get_contents\fP â€” Returns information about arguments used in
creation of a data type.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Type_get_contents(MPI_Datatype datatype, int max_integers,
     int max_addresses, int max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Datatype array_of_datatypes[])
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TYPE_GET_CONTENTS(DATATYPE, MAX_INTEGERS, MAX_ADDRESSES,
             MAX_DATATYPES, ARRAY_OF_INTEGERS, ARRAY_OF_ADDRESSES,
             ARRAY_OF_DATATYPES, IERROR)
     INTEGER DATATYPE, MAX_INTEGERS, MAX_ADDRESSES, MAX_DATATYPES
     INTEGER ARRAY_OF_INTEGERS(*), ARRAY_OF_DATATYPES(*), IERROR
     INTEGER(KIND=MPI_ADDRESS_KIND) ARRAY_OF_ADDRESSES(*)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Type_get_contents(datatype, max_integers, max_addresses, max_datatypes,
     array_of_integers, array_of_addresses, array_of_datatypes,
             ierror)
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER, INTENT(IN) :: max_integers, max_addresses, max_datatypes
     INTEGER, INTENT(OUT) :: array_of_integers(max_integers)
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) ::
     array_of_addresses(max_addresses)
     TYPE(MPI_Datatype), INTENT(OUT) :: array_of_datatypes(max_datatypes)
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBdatatype\fP: Data type to access (handle).
.IP \(bu 2
\fBmax_integers\fP: Number of elements in \fIarray_of_integers (nonnegative integer).\fP
.IP \(bu 2
\fBmax_addresses\fP: Number of elements in \fIarray_of_addresses (nonnegative integer).\fP
.IP \(bu 2
\fBmax_datatypes\fP: Number of elements in \fIarray_of_datatypes (nonnegative integer).\fP
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBarray_of_integers\fP: Contains integer arguments used in constructing \fIdatatype (array of integers).\fP
.IP \(bu 2
\fBarray_of_addresses\fP: Contains address arguments used in constructing \fIdatatype (array of integers).\fP
.IP \(bu 2
\fBarray_of_datatypes\fP: Contains data\-type arguments used in constructing \fIdatatype (array of integers).\fP
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
For the given data type, \fI\%MPI_Type_get_envelope\fP returns information on
the number and type of input arguments used in the call that created the
data type. The number\-of\-arguments values returned can be used to
provide sufficiently large arrays in the decoding routine
\fI\%MPI_Type_get_contents\fP\&. This call and the meaning of the returned values
is described below. The combiner reflects the MPI data type constructor
call that was used in creating \fIdatatype.\fP
.sp
The parameter \fIdatatype must be a predefined unnamed or a derived data
type. The call is erroneous if datatype is a predefined named data
type.\fP
.sp
The values given for \fImax_integers, max_addresses, and max_datatypes
must be at least as large as the value returned in num_integers,
num_addresses, and num_datatypes, respectively, in the call
:ref:\(gaMPI_Type_get_envelope\(ga for the same datatype argument.\fP
.sp
The data types returned in \fIarray_of_datatypes are handles to data\-type
objects that are equivalent to the data types used in the original
construction call. If these were derived data types, then the returned
data types are new data\-type objects, and the user is responsible for
freeing these datatypes with :ref:\(gaMPI_Type_free\(ga. If these were predefined
data types, then the returned data type is equal to that (constant)
predefined data type and cannot be freed.\fP
.sp
The committed state of returned derived data types is undefined, that
is, the data types may or may not be committed. Furthermore, the content
of attributes of returned data types is undefined.
.sp
Note that \fI\%MPI_Type_get_contents\fP can be invoked with a data\-type argument
that was constructed using \fI\%MPI_Type_create_f90_real\fP,
\fI\%MPI_Type_create_f90_integer\fP, or \fI\%MPI_Type_create_f90_complex\fP (an unnamed
predefined data type). In such a case, an empty \fIarray_of_datatypes\fP is
returned.
.sp
In the legacy MPI\-1 datatype constructor calls, the address arguments in
Fortran are of type \fBINTEGER\fP\&. In subsequent versions of the \fI\%MPI
Standard\fP, the address
arguments are of type \fBINTEGER(KIND=MPI_ADDRESS_KIND)\fP\&. The call
\fI\%MPI_Type_get_contents\fP returns all addresses in an argument of type
\fBINTEGER(KIND=MPI_ADDRESS_KIND)\fP\&. This is true even if the old MPI\-1 calls
were used. Thus, the location of values returned can be thought of as
being returned by the C bindings. It can also be determined by examining
the current MPI calls for datatype constructors for the deprecated MPI\-1
calls that involve addresses.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Type_get_envelope\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

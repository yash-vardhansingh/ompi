.\" Man page generated from reStructuredText.
.
.TH "MPI_TESTANY" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Testany\fP — Tests for completion of any one previously initiated
communication in a list.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Testany(int count, MPI_Request array_of_requests[],
     int *index, int *flag, MPI_Status *status)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TESTANY(COUNT, ARRAY_OF_REQUESTS, INDEX, FLAG, STATUS, IERROR)
     LOGICAL FLAG
     INTEGER COUNT, ARRAY_OF_REQUESTS(*), INDEX
     INTEGER STATUS(MPI_STATUS_SIZE), IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Testany(count, array_of_requests, index, flag, status, ierror)
     INTEGER, INTENT(IN) :: count
     TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(count)
     INTEGER, INTENT(OUT) :: index
     LOGICAL, INTENT(OUT) :: flag
     TYPE(MPI_Status) :: status
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcount\fP: List length (integer).
.IP \(bu 2
\fBarray_of_requests\fP: Array of requests (array of handles).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBindex\fP: Index of operation that completed, or \fBMPI_UNDEFINED\fP if none completed (integer).
.IP \(bu 2
\fBflag\fP: True if one of the operations is complete (logical).
.IP \(bu 2
\fBstatus\fP: Status object (status).
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Testany\fP tests for completion of either one or none of the operations
associated with active handles. In the former case, it returns \fIflag\fP =
true, returns in \fIindex\fP the index of this request in the array, and
returns in \fIstatus\fP the status of that operation; if the request was
allocated by a nonblocking communication call then the request is
deallocated and the handle is set to \fBMPI_REQUEST_NULL\fP\&. (The array is
indexed from 0 in C, and from 1 in Fortran.) In the latter case (no
operation completed), it returns \fIflag\fP = false, returns a value of
\fBMPI_UNDEFINED\fP in \fIindex\fP, and \fIstatus\fP is undefined.
.sp
The array may contain null or inactive handles. If the array contains no
active handles then the call returns immediately with \fIflag\fP = true,
\fIindex\fP = \fBMPI_UNDEFINED\fP, and an empty \fIstatus\fP\&.
.sp
If the array of requests contains active handles then the execution of
\fBMPI_Testany(count, array_of_requests, index, status)\fP has the same effect
as the execution of \fBMPI_Test(&array_of_requests[i], flag, status)\fP,
for \fIi\fP=0,1,…,count\-1, in some arbitrary order, until one
call returns \fBflag = true\fP, or all fail. In the former case, \fIindex\fP is
set to the last value of \fIi\fP, and in the latter case, it is set to
\fBMPI_UNDEFINED\fP\&. \fI\%MPI_Testany\fP with an array containing one active entry is
equivalent to \fI\%MPI_Test\fP\&.
.sp
If your application does not need to examine the \fIstatus\fP field, you can
save resources by using the predefined constant \fBMPI_STATUS_IGNORE\fP as a
special value for the \fIstatus\fP argument.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
Note that per the “Return Status” section in the “Point\-to\-Point
Communication” chapter in the \fI\%MPI Standard\fP, MPI errors on requests passed to
\fI\%MPI_Testany\fP do not set the \fBstatus.MPI_ERROR\fP field in the
returned \fIstatus\fP\&.  The error code is always passed to the back\-end
error handler and may be passed back to the caller through the return
value of \fI\%MPI_Testany\fP if the back\-end error handler returns it.
The pre\-defined MPI error handler \fBMPI_ERRORS_RETURN\fP exhibits this
behavior, for example.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Test\fP
.IP \(bu 2
\fI\%MPI_Testall\fP
.IP \(bu 2
\fI\%MPI_Testsome\fP
.IP \(bu 2
\fI\%MPI_Wait\fP
.IP \(bu 2
\fI\%MPI_Waitall\fP
.IP \(bu 2
\fI\%MPI_Waitany\fP
.IP \(bu 2
\fI\%MPI_Waitsome\fP
.IP \(bu 2
\fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

.\" Man page generated from reStructuredText.
.
.TH "MPIX_COMM_IS_REVOKED" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPIX_Comm_is_revoked\fP \- Test if a communicator is revoked.
.sp
This is part of the User Level Fault Mitigation \fI\%ULFM extension\fP\&.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
#include <mpi\-ext.h>

int MPIX_Comm_is_revoked(MPI_Comm comm, int *flag)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
USE MPI_EXT
! or the older form: INCLUDE \(aqmpif.h\(aq

MPIX_COMM_IS_REVOKED(COMM, FLAG, IERROR)
     INTEGER COMM, IERROR
     LOGICAL FLAG
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
USE mpi_ext_f08

MPIX_Comm_is_revoked(comm, flag, ierror)
     TYPE(MPI_Comm), INTENT(IN) :: comm
     LOGICAL, INTENT(OUT) :: flag
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBflag\fP: \fItrue\fP if the communicator is revoked.
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
Returns \fIflag = true\fP if the communicator associated with the handle
\fIcomm\fP is revoked at the calling process. It returns \fIflag = false\fP
otherwise. The operation is local.
.SH HOW CAN A COMMUNICATOR BECOME REVOKED
.sp
A communicator can become revoked when
.INDENT 0.0
.IP 1. 3
the user calls the \fI\%MPIX_Comm_revoke\fP procedure on \fIcomm\fP to revoke
the communicator at the local process;
.IP 2. 3
an MPI operation raised the error class MPIX_ERR_REVOKED because
another process called the \fI\%MPIX_Comm_revoke\fP procedure on \fIcomm\fP;
.IP 3. 3
the communicator has the info key \fImpi_error_range\fP set to \fIgroup\fP or
\fIuniverse\fP, in which case the failure of any process in, respectively,
the group of \fIcomm\fP or the MPI universe caused an operation to raise
an error of class MPIX_ERR_REVOKED.
.UNINDENT
.SH REVOKE PROPAGATION AND ORDERING
.sp
Note that in a multithreaded application, a thread calling
\fI\%MPIX_Comm_is_revoked\fP may return \fIflag = true\fP before the operation
that raises the first exception of class MPIX_ERR_REVOKED has completed
in a concurrent thread.
.SH EFFECT OF A COMMUNICATOR REVOCATION
.sp
Once a communicator has been revoked at an MPI process, all subsequent
non\-local operations on that communicator (with some exceptions listed
below), are considered local and must complete by raising an error of
class MPIX_ERR_REVOKED at that MPI process.
.SH OPERATIONS ON A REVOKED COMMUNICATOR
.sp
The following operations never raise an error of class MPIX_ERR_REVOKED,
and complete with their normal semantics on a revoked communicator.
.INDENT 0.0
.IP \(bu 2
\fI\%MPIX_Comm_agree\fP
.IP \(bu 2
\fI\%MPIX_Comm_iagree\fP
.IP \(bu 2
\fI\%MPIX_Comm_shrink\fP
.IP \(bu 2
\fI\%MPIX_Comm_ishrink\fP
.UNINDENT
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPIX_Comm_revoke\fP
.IP \(bu 2
\fI\%MPIX_Comm_agree\fP
.IP \(bu 2
\fI\%MPIX_Comm_shrink\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

.\" Man page generated from reStructuredText.
.
.TH "MPI_IPROBE" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Iprobe\fP — Nonblocking test for a message.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag,
     MPI_Status *status)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_IPROBE(SOURCE, TAG, COMM, FLAG, STATUS, IERROR)
     LOGICAL FLAG
     INTEGER SOURCE, TAG, COMM, STATUS(MPI_STATUS_SIZE), IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Iprobe(source, tag, comm, flag, status, ierror)
     INTEGER, INTENT(IN) :: source, tag
     TYPE(MPI_Comm), INTENT(IN) :: comm
     LOGICAL, INTENT(OUT) :: flag
     TYPE(MPI_Status) :: status
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBsource\fP: Source rank or \fBMPI_ANY_SOURCE\fP (integer).
.IP \(bu 2
\fBtag\fP: Tag value or \fBMPI_ANY_TAG\fP (integer).
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBflag\fP: Message\-waiting flag (logical).
.IP \(bu 2
\fBstatus\fP: Status object (status).
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
The \fI\%MPI_Probe\fP and \fI\%MPI_Iprobe\fP operations allow checking of incoming
messages without actual receipt of them. The user can then decide how to
receive them, based on the information returned by the probe (basically,
the information returned by status). In particular, the user may
allocate memory for the receive buffer, according to the length of the
probed message.
.sp
\fBMPI_Iprobe(source, tag, comm, flag, status)\fP returns \fIflag\fP = true if there
is a message that can be received and that matches the pattern specified
by the arguments source, tag, and comm. The call matches the same
message that would have been received by a call to \fBMPI_Recv(..., source,
tag, comm, status)\fP executed at the same point in the program, and
returns in status the same value that would have been returned by
\fI\%MPI_Recv\fP\&. Otherwise, the call returns \fIflag\fP = false, and leaves status
undefined.
.sp
If \fI\%MPI_Iprobe\fP returns \fIflag\fP = true, then the content of the
status object can be subsequently accessed as described in the “Return
Status” subsection of the “Point\-to\-Point Communication” chapter in
the \fI\%MPI Standard\fP to find the
source, tag, and length of the probed message.
.sp
A subsequent receive executed with the same context, and the source and
tag returned in status by \fI\%MPI_Iprobe\fP will receive the message that was
matched by the probe if no other intervening receive occurs after the
probe. If the receiving process is multithreaded, it is the user’s
responsibility to ensure that the last condition holds.
.sp
The source argument of \fI\%MPI_Probe\fP can be \fBMPI_ANY_SOURCE\fP, and the tag
argument can be \fBMPI_ANY_TAG\fP, so that one can probe for messages from an
arbitrary source and/or with an arbitrary tag. However, a specific
communication context must be provided with the comm argument.
.sp
If your application does not need to examine the \fIstatus\fP field, you can
save resources by using the predefined constant \fBMPI_STATUS_IGNORE\fP as a
special value for the \fIstatus\fP argument.
.sp
It is not necessary to receive a message immediately after it has been
probed for, and the same message may be probed for several times before
it is received.
.SH NOTE
.sp
Multi\-threaded application developers should remember that two threads
calling \fI\%MPI_Iprobe\fP may return true for the same message in both
threads.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
Note that per the “Return Status” section in the “Point\-to\-Point
Communication” chapter in the \fI\%MPI Standard\fP, MPI errors on messages queried
by \fI\%MPI_Iprobe\fP do not set the \fBstatus.MPI_ERROR\fP field in the
returned \fIstatus\fP\&.  The error code is always passed to the back\-end
error handler and may be passed back to the caller through the return
value of \fI\%MPI_Iprobe\fP if the back\-end error handler returns it.
The pre\-defined MPI error handler \fBMPI_ERRORS_RETURN\fP exhibits this
behavior, for example.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Probe\fP
.IP \(bu 2
\fI\%MPI_Cancel\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

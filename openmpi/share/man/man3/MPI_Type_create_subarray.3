.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_CREATE_SUBARRAY" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Type_create_subarray\fP â€” Creates a data type describing an
\fIn\fP\-dimensional subarray of an \fIn\fP\-dimensional array.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Type_create_subarray(int ndims, const int array_of_sizes[],
    const int array_of_subsizes[], const int array_of_starts[],
    int order, MPI_Datatype oldtype, MPI_Datatype *newtype)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TYPE_CREATE_SUBARRAY(NDIMS, ARRAY_OF_SIZES, ARRAY_OF_SUBSIZES,
     ARRAY_OF_STARTS, ORDER, OLDTYPE, NEWTYPE, IERROR)

     INTEGER NDIMS, ARRAY_OF_SIZES(*), ARRAY_OF_SUBSIZES(*),
     ARRAY_OF_STARTS(*), ORDER, OLDTYPE, NEWTYPE, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Type_create_subarray(ndims, array_of_sizes, array_of_subsizes,
             array_of_starts, order, oldtype, newtype, ierror)
     INTEGER, INTENT(IN) :: ndims, array_of_sizes(ndims),
     array_of_subsizes(ndims), array_of_starts(ndims), order
     TYPE(MPI_Datatype), INTENT(IN) :: oldtype
     TYPE(MPI_Datatype), INTENT(OUT) :: newtype
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBndims\fP: Number of array dimensions (positive integer).
.IP \(bu 2
\fBarray_of_sizes\fP: Number of elements of type \fIoldtype\fP in each dimension of the full array (array of positive integers).
.IP \(bu 2
\fBarray_of_subsizes\fP: Number of elements of type \fIoldtype\fP in each dimension of the subarray (array of positive integers).
.IP \(bu 2
\fBarray_of_starts\fP: Starting coordinates of the subarray in each dimension (array of nonnegative integers).
.IP \(bu 2
\fBorder\fP: Array storage order flag (state).
.IP \(bu 2
\fBoldtype\fP: Array element data type (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBnewtype\fP: New data type (handle).
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
The subarray type constructor creates an MPI data type describing an
\fIn\fP\-dimensional subarray of an \fIn\fP\-dimensional array. The subarray may
be situated anywhere within the full array, and may be of any nonzero
size up to the size of the larger array as long as it is confined within
this array. This type constructor facilitates creating file types to
access arrays distributed in blocks among processes to a single file
that contains the global array.
.sp
This type constructor can handle arrays with an arbitrary number of
dimensions and works for both C\- and Fortran\-ordered matrices (that is,
row\-major or column\-major). Note that a C program may use Fortran order
and a Fortran program may use C order.
.sp
The \fIndims\fP parameter specifies the number of dimensions in the full
data array and gives the number of elements in \fIarray_of_sizes\fP,
\fIarray_of_subsizes\fP, and \fIarray_of_starts\fP\&.
.sp
The number of elements of type \fIoldtype\fP in each dimension of the
\fIn\fP\-dimensional array and the requested subarray are specified by
\fIarray_of_sizes\fP and \fIarray_of_subsizes\fP, respectively. For any
dimension \fIi\fP, it is erroneous to specify \fIarray_of_subsizes[i]\fP < 1 or
\fIarray_of_subsizes[i]\fP > \fIarray of sizes[i]\fP\&.
.sp
The \fIarray_of_starts\fP contains the starting coordinates of each
dimension of the subarray. Arrays are assumed to be indexed starting
from zero. For any dimension \fIi\fP, it is erroneous to specify
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
array_of_starts[i] < 0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
array_of_starts[i] > (array_of_sizes[i] \- array_of_subsizes[i]).
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fIorder\fP argument specifies the storage order for the subarray as
well as the full array. It must be set to one of the following:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ORDER_C\fP: The ordering used by C arrays, (that is, row\-major order)
.IP \(bu 2
\fBMPI_ORDER_FORTRAN\fP: The ordering used by Fortran arrays, (that is, column\-major order)
.UNINDENT
.sp
A \fIndims\fP\-dimensional subarray (\fInewtype\fP) with no extra padding can be
defined by the function Subarray() as follows:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
newtype = Subarray(ndims, {size_0, size_1,..., size_ndims\-1},
          {subsize_0, subsize_1, ..., subsize_ndims\-1},
          {start_0, start_1, ..., start_ndims\-1}, oldtype)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Let the typemap of \fIoldtype\fP have the form:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(type_0, disp_0), (type_1, disp_1), ..., (type_n\-1, disp_n\-1)}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where type\fIi\fP is a predefined MPI data type, and let \fIex\fP be the
extent of \fIoldtype\fP\&.
.sp
The \fBSubarray()\fP function is defined recursively in three equations on
page 72 of the MPI\-2 standard.
.sp
For an example use of \fI\%MPI_Type_create_subarray\fP in the context
of I/O, see Section 9.9.2 of the MPI\-2 standard.
.SH NOTES
.sp
In a Fortran program with arrays indexed starting from 1, if the
starting coordinate of a particular dimension of the subarray is \fIn\fP,
then the entry in array of starts for that dimension is \fIn\fP\-1.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

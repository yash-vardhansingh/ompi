.\" Man page generated from reStructuredText.
.
.TH "MPIX_COMM_SHRINK" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPIX_Comm_shrink\fP, \fI\%MPIX_Comm_ishrink\fP \- Create a new communicator
that includes all processes from the parent communicator that have not failed.
.sp
This is part of the User Level Fault Mitigation \fI\%ULFM extension\fP\&.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
#include <mpi\-ext.h>

int MPIX_Comm_shrink(MPI_Comm comm, MPI_Comm *newcomm)

int MPIX_Comm_ishrink(MPI_Comm comm, MPI_Comm *newcomm, MPI_Request *request)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
USE MPI_EXT
! or the older form: INCLUDE \(aqmpif.h\(aq

MPIX_COMM_SHRINK(COMM, NEWCOMM, IERROR)
     INTEGER COMM, NEWCOMM, IERROR

MPIX_COMM_ISHRINK(COMM, NEWCOMM, REQUEST, IERROR)
     INTEGER COMM, NEWCOMM, REQUEST, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
USE mpi_ext_f08

MPIX_Comm_shrink(comm, newcomm, ierror)
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Comm), INTENT(OUT) :: newcomm
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPIX_Comm_ishrink(comm, newcomm, request, ierror)
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Comm), INTENT(OUT), ASYNCHRONOUS :: newcomm
     TYPE(MPI_Request), INTENT(OUT) :: request
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBnewcomm\fP: Communicator (handle).
.IP \(bu 2
\fBrequest\fP: Request (handle, non\-blocking only).
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
This collective operation creates a new intra\- or intercommunicator
\fInewcomm\fP from the intra\- or intercommunicator \fIcomm\fP, respectively, by
excluding the group of failed MPI processes as shrinkd upon during the
operation.
.sp
The groups of \fInewcomm\fP must include every MPI process that returns from
\fI\%MPIX_Comm_shrink\fP, and it must exclude every MPI process whose failure
caused an operation on \fIcomm\fP to raise an MPI error of class
MPIX_ERR_PROC_FAILED or MPIX_ERR_PROC_FAILED_PENDING at a member of the
groups of \fInewcomm\fP, before that member initiated the shrink operation.
.sp
Said otherwise, this procedure is semantically equivalent to an
\fI\%MPI_Comm_split\fP operation that would succeed despite failures, where
members of the groups of \fInewcomm\fP participate with the same color and a key
equal to their rank in \fIcomm\fP\&.
.sp
\fI\%MPIX_Comm_ishrink\fP is the non\-blocking variant of \fI\%MPIX_Comm_shrink\fP\&.
Note that, as with \fI\%MPI_Comm_idup\fP, it is erroneous to use \fInewcomm\fP
before \fIrequest\fP has completed.
.SH WHEN THE COMMUNICATOR IS REVOKED OR CONTAINS FAILED PROCESSES
.sp
This function never raises an error of classes MPIX_ERR_REVOKED or
MPIX_ERR_PROC_FAILED. The defined semantics of \fI\%MPIX_Comm_shrink\fP and
\fI\%MPIX_Comm_ishrink\fP are maintained when \fIcomm\fP is revoked, or when the
group of \fIcomm\fP contains failed MPI processes. In particular,
\fI\%MPIX_Comm_shrink\fP and \fI\%MPIX_Comm_ishrink\fP are collective operations,
even when \fIcomm\fP is revoked.
.sp
The implementation will strive to detect all failures during the shrink
operation, but in certain circumpstances, the group of \fInewcomm\fP may still
contain failed MPI processes, whose failure will be detected in subsequent
MPI operations on \fInewcomm\fP\&.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPIX_Comm_is_revoked\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

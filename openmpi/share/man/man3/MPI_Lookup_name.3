.\" Man page generated from reStructuredText.
.
.TH "MPI_LOOKUP_NAME" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Lookup_name \- Finds port associated with a service name
.ft P
.fi
.UNINDENT
.UNINDENT
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Lookup_name(const char *service_name, MPI_Info info,
     char *port_name)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_LOOKUP_NAME(SERVICE_NAME, INFO, PORT_NAME, IERROR)
     CHARACTER*(*)   SERVICE_NAME, PORT_NAME
     INTEGER         INFO, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Lookup_name(service_name, info, port_name, ierror)
     CHARACTER(LEN=*), INTENT(IN) :: service_name
     TYPE(MPI_Info), INTENT(IN) :: info
     CHARACTER(LEN=MPI_MAX_PORT_NAME), INTENT(OUT) :: port_name
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBservice_name\fP: A service name (string).
.IP \(bu 2
\fBinfo\fP: Options to the name service functions (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBport_name\fP: a port name (string).
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
This function retrieves a \fIport_name\fP published under \fIservice_name\fP by
a previous invocation of \fI\%MPI_Publish_name\fP\&. The application must supply a
\fIport_name\fP buffer large enough to hold the largest possible port name
(i.e., MPI_MAX_PORT_NAME bytes).
.SH INFO ARGUMENTS
.sp
The following keys for \fIinfo\fP are recognized:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Key                   Type      Description
\-\-\-                   \-\-\-\-      \-\-\-\-\-\-\-\-\-\-\-

ompi_lookup_order     char *    Resolution order for name lookup.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fIompi_lookup_order\fP info key can specify one of four valid string
values (see the NAME SCOPE section below for more information on name
scopes):
.sp
\fIlocal\fP: Only search the local scope for name resolution.
.sp
\fIglobal\fP: Only search the global scope for name resolution.
.INDENT 0.0
.TP
.B \fIlocal,global\fP: Search the local scope for name resolution. If
not found, try searching the global scope for name resolution. This
behavior is the default if the \fIompi_lookup_order\fP info key is not
specified.
.TP
.B \fIglobal,local\fP: Search the global scope for name resolution. If
not found, try searching the local scope for name resolution.
.UNINDENT
.sp
If no info key is provided, the search will first check to see if a
global server has been specified and is available. If so, then the
search will default to global scope first, followed by local. Otherwise,
the search will default to local.
.SH NAME SCOPE
.sp
Open MPI supports two name scopes: \fIglobal\fP and \fIlocal\fP\&. Local scope
values are placed in a data store located on the mpirun of the calling
processâ€™ job, while global scope values reside on a central server.
Calls to \fI\%MPI_Unpublish_name\fP must correctly specify the scope to be used
in finding the value to be removed. The function will return an error if
the specified service name is not found on the indicated location.
.sp
For a more detailed description of scoping rules, please see the
\fI\%MPI_Publish_name\fP man page.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Publish_name\fP
.IP \(bu 2
\fI\%MPI_Open_port\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

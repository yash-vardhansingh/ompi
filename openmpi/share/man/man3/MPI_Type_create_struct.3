.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_CREATE_STRUCT" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Type_create_struct\fP — Creates a structured data type.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Type_create_struct(int count, int array_of_blocklengths[],
     const MPI_Aint array_of_displacements[], const MPI_Datatype array_of_types[],
     MPI_Datatype *newtype)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TYPE_CREATE_STRUCT(COUNT, ARRAY_OF_BLOCKLENGTHS,
             ARRAY_OF_DISPLACEMENTS, ARRAY_OF_TYPES, NEWTYPE, IERROR)
     INTEGER COUNT, ARRAY_OF_BLOCKLENGTHS(*), ARRAY_OF_TYPES(*),
     INTEGER NEWTYPE, IERROR
     INTEGER(KIND=MPI_ADDRESS_KIND) ARRAY_OF_DISPLACEMENTS(*)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Type_create_struct(count, array_of_blocklengths,
             array_of_displacements, array_of_types, newtype, ierror)
     INTEGER, INTENT(IN) :: count, array_of_blocklengths(count)
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) ::
     array_of_displacements(count)
     TYPE(MPI_Datatype), INTENT(IN) :: array_of_types(count)
     TYPE(MPI_Datatype), INTENT(OUT) :: newtype
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcount\fP: Number of blocks (integer) — also number of entries in arrays \fIarray_of_types\fP, \fIarray_of_displacements\fP, and \fIarray_of_blocklengths\fP\&.
.IP \(bu 2
\fBarray_of_blocklengths\fP: Number of elements in each block (array of integers).
.IP \(bu 2
\fBarray_of_displacements\fP: Byte displacement of each block (array of integers).
.IP \(bu 2
\fBarray_of_types\fP: Type of elements in each block (array of handles to data\-type objects).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBnewtype\fP: New data type (handle).
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Type_create_struct\fP creates a structured data type. This routine
replaces \fI\%MPI_Type_struct\fP, which is now deprecated.
.sp
\fI\%MPI_Type_create_struct\fP is the most general type constructor. It further
generalizes \fI\%MPI_Type_create_hindexed\fP in that it allows each block to consist of
replications of different datatypes.
.sp
\fBExample 1:\fP
Let \fBtype1\fP have type map
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(double, 0), (char, 8)}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
with extent 16. Let \fBB = (2, 1, 3)\fP, \fBD = (0, 16, 26)\fP, and \fBT = (MPI_FLOAT, type1, MPI_CHAR)\fP\&.
Then a call to \fBMPI_Type_create_struct(3, B, D, T, newtype)\fP
returns a datatype with type map
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
 (float, 0), (float,4),             // 2 float
 (double, 16), (char, 24),          // 1 type1
 (char, 26), (char, 27), (char, 28) // 3 char
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
That is, two copies of \fBMPI_FLOAT\fP starting at 0, followed by one copy of
\fBtype1\fP starting at 16, followed by three copies of \fBMPI_CHAR\fP, starting at
26.
.sp
\fBExample 2:\fP
.sp
An example of a struct with only some components part of the type
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
struct MyStruct {
    double x[2], y;
    char a;
    int n;
};

// create a new type where we only send x, y and n
int B[] = {
    2, // 2 double\(aqs
    1, // 1 double
    1, // 1 int
    1  // alignment padding
};
MPI_Aint D[] = {
    offsetof(struct MyStruct, x),
    offsetof(struct MyStruct, y),
    offsetof(struct MyStruct, n),
    sizeof(struct MyStruct)
};
MPI_Datatype T[] = {
    MPI_DOUBLE,
    MPI_DOUBLE,
    MPI_INT,
    MPI_UB
};

MPI_Datatype mpi_dt_mystruct;
MPI_Type_create_struct(4, B, D, T, &mpi_dt_mystruct);
MPI_Type_commit(&mpi_dt_mystruct);

// We can now send a struct (omitting a)

struct MyStruct values[3];

if ( rank == 0 ) {
    // ... initialize values
    MPI_Send(values, 3, mpi_dt_mystruct, 1, 0, MPI_COMM_WORLD);
} else if ( rank == 1 ) {
    MPI_Recv(values, 3, mpi_dt_mystruct, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more information, see section 5.1.2 of the MPI\-4.0 Standard.
.SH NOTES
.sp
If an upper bound is set explicitly by using the MPI datatype \fBMPI_UB\fP, the
corresponding index must be positive.
.sp
The MPI\-1 Standard originally made vague statements about padding and
alignment; this was intended to allow the simple definition of
structures that could be sent with a count greater than one. For
example,
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
struct {int a; char b;} foo;
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
may have
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sizeof(foo) = sizeof(int) + sizeof(char);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
defining the extent of a datatype as including an epsilon, which would
have allowed an implementation to make the extent an MPI datatype for
this structure equal to \fB2*sizeof(int)\fP\&. However, since different systems
might define different paddings, a clarification to the standard made
epsilon zero. Thus, if you define a structure datatype and wish to send
or receive multiple items, you should explicitly include an \fBMPI_UB\fP entry
as the last member of the structure. See the above example.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Type_struct\fP
.IP \(bu 2
\fI\%MPI_Type_create_hindexed\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

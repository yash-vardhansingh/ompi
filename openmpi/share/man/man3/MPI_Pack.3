.\" Man page generated from reStructuredText.
.
.TH "MPI_PACK" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Pack\fP â€” Packs data of a given datatype into contiguous memory.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Pack(const void *inbuf, int incount, MPI_Datatype datatype,
     void *outbuf, int outsize, int *position, MPI_Comm comm)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_PACK(INBUF, INCOUNT, DATATYPE, OUTBUF,OUTSIZE, POSITION,
             COMM, IERROR)
     <type>  INBUF(*), OUTBUF(*)
     INTEGER INCOUNT, DATATYPE, OUTSIZE, POSITION, COMM, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Pack(inbuf, incount, datatype, outbuf, outsize, position, comm, ierror)
     TYPE(*), DIMENSION(..), INTENT(IN) :: inbuf
     TYPE(*), DIMENSION(..) :: outbuf
     INTEGER, INTENT(IN) :: incount, outsize
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER, INTENT(INOUT) :: position
     TYPE(MPI_Comm), INTENT(IN) :: comm
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBinbuf\fP: Input buffer start (choice).
.IP \(bu 2
\fBincount\fP: Number of input data items (integer).
.IP \(bu 2
\fBdatatype\fP: Datatype of each input data item (handle).
.IP \(bu 2
\fBoutsize\fP: Output buffer size, in bytes (integer).
.IP \(bu 2
\fBcomm\fP: Communicator for packed message (handle).
.UNINDENT
.SH INPUT/OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBposition\fP: Current position in buffer, in bytes (integer).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBoutbuf\fP: Output buffer start (choice).
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
Packs the message in the send buffer specified by \fIinbuf\fP, \fIincount\fP,
\fIdatatype\fP into the buffer space specified by \fIoutbuf\fP and \fIoutsize\fP\&.
The input buffer can be any communication buffer allowed in \fI\%MPI_Send\fP\&.
The output buffer is a contiguous storage area containing \fIoutsize\fP
bytes, starting at the address \fIoutbuf\fP (length is counted in bytes, not
elements, as if it were a communication buffer for a message of type
MPI_Packed).
.sp
The input value of \fIposition\fP is the first location in the output buffer
to be used for packing. \fIposition\fP is incremented by the size of the
packed message, and the output value of \fIposition\fP is the first location
in the output buffer following the locations occupied by the packed
message. The \fIcomm\fP argument is the communicator that will be
subsequently used for sending the packed message.
.sp
\fBExample:\fP An example using \fI\%MPI_Pack\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
int myrank, position, i, j, a[2];
char buff[1000];

// ...

MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
if (myrank == 0) {
  /* SENDER CODE */
  position = 0;
  MPI_Pack(&i, 1, MPI_INT, buff, 1000, &position, MPI_COMM_WORLD);
  MPI_Pack(&j, 1, MPI_INT, buff, 1000, &position, MPI_COMM_WORLD);
  MPI_Send(buff, position, MPI_PACKED, 1, 0, MPI_COMM_WORLD);
} else {
  /* RECEIVER CODE */
  MPI_Recv(a, 2, MPI_INT, 0, 0, MPI_COMM_WORLD);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Unpack\fP
.IP \(bu 2
\fI\%MPI_Pack_size\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

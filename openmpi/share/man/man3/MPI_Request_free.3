.\" Man page generated from reStructuredText.
.
.TH "MPI_REQUEST_FREE" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Request_free\fP — Frees a communication request object.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Request_free(MPI_Request *request)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_REQUEST_FREE(REQUEST, IERROR)
     INTEGER REQUEST, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Request_free(request, ierror)
     TYPE(MPI_Request), INTENT(INOUT) :: request
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT/OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBrequest\fP: Communication request (handle).
.UNINDENT
.SH DESCRIPTION
.sp
This operation allows a request object to be deallocated without waiting
for the associated communication to complete.
.sp
\fI\%MPI_Request_free\fP marks the request object for deallocation and sets
request to MPI_REQUEST_NULL. Any ongoing communication that is
associated with the request will be allowed to complete. The request
will be deallocated only after its completion.
.SH NOTES
.sp
Once a request is freed by a call to \fI\%MPI_Request_free\fP, it is not
possible to check for the successful completion of the associated
communication with calls to \fI\%MPI_Wait\fP or \fI\%MPI_Test\fP\&. Also, if an error
occurs subsequently during the communication, an error code cannot be
returned to the user — such an error must be treated as fatal.
Questions arise as to how one knows when the operations have completed
when using \fI\%MPI_Request_free\fP\&. Depending on the program logic, there may
be other ways in which the program knows that certain operations have
completed and this makes usage of \fI\%MPI_Request_free\fP practical. For
example, an active send request could be freed when the logic of the
program is such that the receiver sends a reply to the message sent —
the arrival of the reply informs the sender that the send has completed
and the send buffer can be reused. An active receive request should
never be freed, as the receiver will have no way to verify that the
receive has completed and the receive buffer can be reused.
.sp
\fBExample:\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
CALL MPI_COMM_RANK(MPI_COMM_WORLD, rank)
IF(rank == 0) THEN
    DO i=1, n
      CALL MPI_ISEND(outval, 1, MPI_REAL, 1, 0, req, ierr)
      CALL MPI_REQUEST_FREE(req, ierr)
      CALL MPI_IRECV(inval, 1, MPI_REAL, 1, 0, req, ierr)
      CALL MPI_WAIT(req, status, ierr)
    END DO
ELSE IF (rank == 1) THEN
    CALL MPI_IRECV(inval, 1, MPI_REAL, 0, 0, req, ierr)
    CALL MPI_WAIT(req, status)
    DO I=1, n\-1
       CALL MPI_ISEND(outval, 1, MPI_REAL, 0, 0, req, ierr)
       CALL MPI_REQUEST_FREE(req, ierr)
       CALL MPI_IRECV(inval, 1, MPI_REAL, 0, 0, req, ierr)
       CALL MPI_WAIT(req, status, ierr)
    END DO
    CALL MPI_ISEND(outval, 1, MPI_REAL, 0, 0, req, ierr)
    CALL MPI_WAIT(req, status)
END IF
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This routine is normally used to free persistent requests created with
either \fI\%MPI_Recv_init\fP or \fI\%MPI_Send_init\fP and friends. However, it can
be used to free a request created with \fI\%MPI_Irecv\fP or \fI\%MPI_Isend\fP and
friends; in that case the use can not use the test/wait routines on the
request.
.sp
It \fBis\fP permitted to free an active request. However, once freed, you
can not use the request in a wait or test routine (e.g., \fI\%MPI_Wait\fP ).
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Isend\fP
.IP \(bu 2
\fI\%MPI_Irecv\fP
.IP \(bu 2
\fI\%MPI_Issend\fP
.IP \(bu 2
\fI\%MPI_Ibsend\fP
.IP \(bu 2
\fI\%MPI_Irsend\fP
.IP \(bu 2
\fI\%MPI_Recv_init\fP
.IP \(bu 2
\fI\%MPI_Send_init\fP
.IP \(bu 2
\fI\%MPI_Ssend_init\fP
.IP \(bu 2
\fI\%MPI_Rsend_init\fP
.IP \(bu 2
\fI\%MPI_Test\fP
.IP \(bu 2
\fI\%MPI_Wait\fP
.IP \(bu 2
\fI\%MPI_Waitall\fP
.IP \(bu 2
\fI\%MPI_Waitany\fP
.IP \(bu 2
\fI\%MPI_Waitsome\fP
.IP \(bu 2
\fI\%MPI_Testall\fP
.IP \(bu 2
\fI\%MPI_Testany\fP
.IP \(bu 2
\fI\%MPI_Testsome\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

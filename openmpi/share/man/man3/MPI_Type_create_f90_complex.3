.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_CREATE_F90_COMPLEX" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Type_create_f90_complex \- Returns a bounded MPI complex datatype
.ft P
.fi
.UNINDENT
.UNINDENT
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Type_create_f90_complex(int p, int r,
     MPI_Datatype *newtype)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TYPE_CREATE_F90_COMPLEX (P, R, NEWTYPE, IERROR)
     INTEGER P, R, NEWTYPE, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Type_create_f90_complex(p, r, newtype, ierror)
     INTEGER, INTENT(IN) :: p, r
     TYPE(MPI_Datatype), INTENT(OUT) :: newtype
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBp\fP: Precision, in decimal digits (integer).
.IP \(bu 2
\fBr\fP: Decimal exponent range (integer).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBnewtype\fP: New data type (handle).
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
This function provides a way to declare KIND\-parameterized COMPLEX MPI
datatypes. The arguments are interpreted in a similar fashion to the F90
function SELECTED_REAL_KIND. The parameters \fIp\fP and \fIr\fP must be scalar
integers. The argument \fIp\fP represents the required level of numerical
precision, in decimal digits. The \fIr\fP parameter indicates the range of
exponents desired: the returned datatype will have at least one exponent
between +\fIr\fP and \-\fIr\fP (inclusive).
.sp
Either \fIp\fP or \fIr\fP, but not both, may be omitted from calls to
SELECTED_REAL_KIND. Similarly, either argument to
\fI\%MPI_Type_create_f90_complex\fP may be set to MPI_UNDEFINED.
.SH NOTES
.sp
It is erroneous to supply values for \fIp\fP and \fIr\fP not supported by the
compiler.
.sp
The Fortran function SELECTED_REAL_KIND maps a large number of (\fIp,r\fP)
pairs to a much smaller number of KIND parameters supported by the
compiler. KIND parameters are not specified by the language and are not
portable. From the point of view of the language, variables of the same
base type and KIND parameter are equivalent, even if their KIND
parameters were generated by different (\fIp,r\fP) arguments to
SELECTED_REAL_KIND. However, to help facilitate interoperability in a
heterogeneous environment, equivalency is more strictly defined for
datatypes returned by \fI\%MPI_Type_create_f90_complex\fP\&. Two MPI datatypes,
each generated by this function, will match if and only if they have
identical values for both \fIp\fP and \fIr\fP\&.
.sp
The interaction between the datatypes returned by this function and the
external32 data representation \- used by \fI\%MPI_Pack_external\fP,
\fI\%MPI_Unpack_external\fP, and many MPI_File functions \- is subtle. The
external32 representation of returned datatypes is as follows.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if (p > 33) and/or (r > 4931):
        external32 size = n/a (undefined)
else if (p > 15) and/or (r > 307):
        external32 size = 32
else if (p > 6) and/or (r > 37):
        external32 size = 16
else:
        external32 size = 8
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the external32 representation of a datatype is undefined, so are the
results of using that datatype in operations that require the external32
format. Care should be taken not to use incompatible datatypes
indirectly, e.g., as part of another datatype or through a duplicated
datatype, in these functions.
.sp
If a variable is declared specifying a nondefault KIND value that was
not obtained with SELECTED_REAL_KIND (i.e., \fIp\fP and/or \fIr\fP are unknown),
the only way to obtain a matching MPI datatype is to use the functions
\fI\%MPI_Sizeof\fP and \fI\%MPI_Type_match_size\fP\&.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Pack_external\fP
.IP \(bu 2
\fI\%MPI_Sizeof\fP
.IP \(bu 2
\fI\%MPI_Type_match_size\fP
.IP \(bu 2
\fI\%MPI_Unpack_external\fP
.IP \(bu 2
SELECTED_REAL_KIND
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

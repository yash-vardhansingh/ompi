.\" Man page generated from reStructuredText.
.
.TH "MPIX_COMM_ACK_FAILED" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPIX_Comm_get_failed\fP \- acknowledge failed processes in a communicator.
.sp
This is part of the User Level Fault Mitigation \fI\%ULFM extension\fP\&.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
#include <mpi\-ext.h>

int MPIX_Comm_ack_failed(MPI_Comm comm, int num_to_ack, int *num_acked)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
USE MPI_EXT
! or the older form: INCLUDE \(aqmpif.h\(aq

MPIX_COMM_ACK_FAILED(COMM, NUM_TO_ACK, NUM_ACKED, IERROR)
     INTEGER COMM, NUM_TO_ACK, NUM_ACKED, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
USE mpi_ext_f08

MPIX_Comm_ack_failed(comm, num_to_ack, num_acked, ierror)
     TYPE(MPI_Comm), INTENT(IN) :: comm
     INTEGER, INTENT(IN) :: num_to_ack
     INTEGER, INTENT(OUT) :: num_acked
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.IP \(bu 2
\fBnum_to_ack\fP: maximum number of process failures to acknowledge in \fIcomm\fP (integer)
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBnum_acked\fP: number of acknowledged failures in \fIcomm\fP (integer).
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
his local operation gives the users a way to \fBacknowledge\fP
locally notified failures on \fIcomm\fP\&. The operation acknowledges the first
\fInum_to_ack\fP process failures on \fIcomm\fP, that is, it acknowledges the
failure of members with a rank lower than \fInum_to_ack\fP in the group that
would be produced by a concurrent call to \fI\%MPIX_Comm_get_failed\fP on
the same \fIcomm\fP\&.
.sp
The operation also sets the value of \fInum_acked\fP to the current number of
acknowledged process failures in \fIcomm\fP, that is, a process failure has been
acknowledged on \fIcomm\fP if and only if the rank of the process is lower than
\fInum_acked\fP in the group that would be produced by a subsequent call to
\fI\%MPIX_Comm_get_failed\fP on the same \fIcomm\fP\&.
.sp
\fInum_acked\fP can be larger than \fInum_to_ack\fP when process failures have been
acknowledged in a prior call to \fI\%MPIX_Comm_ack_failed\fP\&.
.SH EFFECT OF ACKNOWLEDGING FAILURES
.sp
After an MPI process failure is acknowledged on \fIcomm\fP, unmatched
MPI_ANY_SOURCE receive operations on the same \fIcomm\fP that would have raised
an error of class MPIX_ERR_PROC_FAILED_PENDING proceed without further raising
errors due to this acknowledged failure.
.sp
Also, \fI\%MPIX_Comm_agree\fP on the same \fIcomm\fP will not raise an error of
class MPI_ERR_PROC_FAILED due to this acknowledged failure.
.SH USAGE PATTERNS
.sp
One may query, without side effect, for the number of currently aknowledged
process failures \fIcomm\fP by supplying 0 in \fInum_to_ack\fP\&.
.sp
Conversely, one may unconditionally acknowledge all currently known process
failures in \fIcomm\fP by supplying the size of the group of \fIcomm\fP in \fInum_to_ack\fP\&.
.sp
Note that the number of acknowledged processes, as returned in \fInum_acked\fP,
can be smaller or larger than the value supplied in \fInum_to_ack\fP; It is
however never larger than the size of the group returned by a subsequent call
to \fI\%MPIX_Comm_get_failed\fP\&.
.SH EFFECT ON COLLECTIVE OPERATIONS
.sp
Calling \fI\%MPIX_Comm_ack_failed\fP on a communicator with failed MPI
processes has no effect on collective operations (except for \fI\%MPIX_Comm_agree\fP).
If a collective operation would raise an error due to the communicator
containing a failed process it will continue to raise an error even after
the failure has been acknowledged. In order to use collective operations
between MPI processes of a communicator that contains failed MPI processes,
users should create a new communicator (e.g., by calling \fI\%MPIX_Comm_shrink\fP).
.SH WHEN COMMUNICATOR IS AN INTER-COMMUNICATOR
.sp
When the communicator is an inter\-communicator, the failures of members
in both the local and the remote groups of \fIcomm\fP are acknowledged.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPIX_Comm_get_failed\fP
.IP \(bu 2
\fI\%MPIX_Comm_agree\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

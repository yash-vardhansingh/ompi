.\" Man page generated from reStructuredText.
.
.TH "MPI_CANCEL" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Cancel\fP — Cancels a communication request.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Cancel(MPI_Request *request)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq

MPI_CANCEL(REQUEST, IERROR)
    INTEGER REQUEST, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08

MPI_Cancel(request, ierror)
    TYPE(MPI_Request), INTENT(IN) :: request
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBrequest\fP : Communication request (handle).
.UNINDENT
.SH OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBierror\fP : Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
The \fI\%MPI_Cancel\fP operation allows pending communications to be canceled.
This is required for cleanup. Posting a send or a receive ties up user
resources (send or receive buffers), and a cancel may be needed to free
these resources gracefully.
.sp
A call to \fI\%MPI_Cancel\fP marks for cancellation a pending, nonblocking
communication operation (send or receive). The cancel call is local. It
returns immediately, possibly before the communication is actually
canceled. It is still necessary to complete a communication that has
been marked for cancellation, using a call to \fI\%MPI_Request_free\fP,
\fI\%MPI_Wait\fP, or \fI\%MPI_Test\fP (or any of the derived operations).
.sp
If a communication is marked for cancellation, then an \fI\%MPI_Wait\fP call for
that communication is guaranteed to return, irrespective of the
activities of other processes (i.e., \fI\%MPI_Wait\fP behaves as a local
function); similarly if \fI\%MPI_Test\fP is repeatedly called in a busy wait
loop for a canceled communication, then \fI\%MPI_Test\fP will eventually be
successful.
.sp
\fI\%MPI_Cancel\fP can be used to cancel a communication that uses a persistent
request (see Section 3.9 in the \fI\%MPI Standard\fP, “Persistent
Communication Requests”) in the same way it is used for nonpersistent
requests. A successful cancellation cancels the active communication,
but not the request itself. After the call to \fI\%MPI_Cancel\fP and the
subsequent call to \fI\%MPI_Wait\fP or \fI\%MPI_Test\fP, the request becomes inactive
and can be activated for a new communication.
.sp
The successful cancellation of a buffered send frees the buffer space
occupied by the pending message.
.sp
Either the cancellation succeeds or the communication succeeds, but not
both. If a send is marked for cancellation, then it must be the case
that either the send completes normally, in which case the message sent
is received at the destination process, or that the send is successfully
canceled, in which case no part of the message is received at the
destination. Then, any matching receive has to be satisfied by another
send. If a receive is marked for cancellation, then it must be the case
that either the receive completes normally, or that the receive is
successfully canceled, in which case no part of the receive buffer is
altered. Then, any matching send has to be satisfied by another receive.
.sp
If the operation has been canceled, then information to that effect will
be returned in the status argument of the operation that completes the
communication.
.SH NOTES
.sp
The primary expected use of \fI\%MPI_Cancel\fP is in multi\-buffering schemes,
where speculative MPI_Irecvs are made. When the computation completes,
some of these requests may remain; using \fI\%MPI_Cancel\fP allows the user to
cancel these unsatisfied requests.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Probe\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

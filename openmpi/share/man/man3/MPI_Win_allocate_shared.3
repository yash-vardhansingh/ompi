.\" Man page generated from reStructuredText.
.
.TH "MPI_WIN_ALLOCATE_SHARED" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Win_allocate_shared\fP — One\-sided MPI call that allocates shared
memory and returns a window object for RMA operations.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Win_allocate_shared (MPI_Aint size, int disp_unit, MPI_Info info,
                             MPI_Comm comm, void *baseptr, MPI_Win *win)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_WIN_ALLOCATE_SHARED(SIZE, DISP_UNIT, INFO, COMM, BASEPTR, WIN, IERROR)
     INTEGER(KIND=MPI_ADDRESS_KIND) SIZE, BASEPTR
     INTEGER DISP_UNIT, INFO, COMM, WIN, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Win_allocate_shared(size, disp_unit, info, comm, baseptr, win, ierror)
     USE, INTRINSIC :: ISO_C_BINDING, ONLY : C_PTR
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size
     INTEGER, INTENT(IN) :: disp_unit
     TYPE(MPI_Info), INTENT(IN) :: info
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(C_PTR), INTENT(OUT) :: baseptr
     TYPE(MPI_Win), INTENT(OUT) :: win
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBsize\fP: Size of window in bytes (nonnegative integer).
.IP \(bu 2
\fBdisp_unit\fP: Local unit size for displacements, in bytes (positive integer).
.IP \(bu 2
\fBinfo\fP: Info argument (handle).
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBbaseptr\fP: Initial address of window.
.IP \(bu 2
\fBwin\fP: Window object returned by the call (handle).
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Win_allocate_shared\fP is a collective call executed by all
processes in the group of \fIcomm\fP\&. On each process, it allocates memory
of at least \fIsize\fP bytes that is shared among all processes in \fIcomm\fP,
and returns a pointer to the locally allocated segment in \fIbaseptr\fP
that can be used for load/store accesses on the calling process. The
locally allocated memory can be the target of load/store accesses by
remote processes; the base pointers for other processes can be queried
using the function \fI\%MPI_Win_shared_query\fP\&. The call also returns
a window object that can be used by all processes in \fIcomm\fP to perform
RMA operations. The \fIsize\fP argument may be different at each process
and \fIsize\fP = 0 is valid. It is the user’s responsibility to ensure
that the communicator \fIcomm\fP represents a group of processes that can
create a shared memory segment that can be accessed by all processes
in the group. The discussions of rationales for \fI\%MPI_Alloc_mem\fP
and \fI\%MPI_Free_mem\fP in MPI\-3.1 section 8.2 also apply to
\fI\%MPI_Win_allocate_shared\fP; in particular, see the rationale in
MPI\-3.1 section 8.2 for an explanation of the type used for
\fIbaseptr\fP\&. The allocated memory is contiguous across process ranks
unless the info key \fIalloc_shared_noncontig\fP is specified. Contiguous
across process ranks means that the first address in the memory
segment of process i is consecutive with the last address in the
memory segment of process i \-
1. This may enable the user to calculate remote address offsets with
local information only.
.sp
The following info keys are supported:
.INDENT 0.0
.TP
.B alloc_shared_noncontig
If not set to \fItrue\fP, the allocation strategy is to allocate
contiguous memory across process ranks. This may limit the
performance on some architectures because it does not allow the
implementation to modify the data layout (e.g., padding to reduce
access latency).
.TP
.B blocking_fence
If set to \fItrue\fP, the osc/sm component will use \fI\%MPI_Barrier\fP for
\fI\%MPI_Win_fence\fP\&. If set to \fIfalse\fP a condition variable and counter
will be used instead. The default value is \fIfalse\fP\&. This info key is
Open MPI specific.
.UNINDENT
.sp
For additional supported info keys see \fI\%MPI_Win_create\fP\&.
.SH NOTES
.sp
Common choices for \fIdisp_unit\fP are 1 (no scaling), and (in C syntax)
\fIsizeof(type)\fP, for a window that consists of an array of elements of
type \fItype\fP\&. The later choice will allow one to use array indices in RMA
calls, and have those scaled correctly to byte displacements, even in a
heterogeneous environment.
.sp
Calling \fI\%MPI_Win_free\fP will deallocate the memory allocated by
\fI\%MPI_Win_allocate_shared\fP\&. It is thus erroneous to manually free
\fIbaseptr\fP\&.
.SH C NOTES
.sp
While \fIbaseptr\fP is a \fBvoid *\fP type, this is to allow easy use of any
pointer object for this parameter. This argument is really a \fBvoid **\fP
type.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Alloc_mem\fP
.IP \(bu 2
\fI\%MPI_Free_mem\fP
.IP \(bu 2
\fI\%MPI_Win_allocate\fP
.IP \(bu 2
\fI\%MPI_Win_create\fP
.IP \(bu 2
\fI\%MPI_Win_shared_query\fP
.IP \(bu 2
\fI\%MPI_Win_free\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

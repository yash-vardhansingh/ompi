.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_GET_ENVELOPE" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Type_get_envelope\fP â€” Returns information about input arguments
associated with a data type.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Type_get_envelope(MPI_Datatype datatype, int *num_integers,
     int *num_addresses, int *num_datatypes, int *combiner)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TYPE_GET_ENVELOPE(DATATYPE, NUM_INTEGERS, NUM_ADDRESSES,
             NUM_DATATYPES, COMBINER, IERROR)
     INTEGER DATATYPE, NUM_INTEGERS, NUM_ADDRESSES
     INTEGER NUM_DATATYPES, COMBINER, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Type_get_envelope(datatype, num_integers, num_addresses, num_datatypes,
             combiner, ierror)
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER, INTENT(OUT) :: num_integers, num_addresses, num_datatypes,
     combiner
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBdatatype\fP: Data type to access (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBnum_integers\fP: Number of input integers used in the call constructing \fIcombiner\fP (nonnegative integer).
.IP \(bu 2
\fBnum_addresses\fP: Number of input addresses used in the call constructing \fIcombiner\fP (nonnegative integer).
.IP \(bu 2
\fBnum_datatypes\fP: Number of input data types used in the call constructing \fIcombiner\fP (nonnegative integer).
.IP \(bu 2
\fBcombiner\fP: Combiner (state).
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
For the given data type, \fI\%MPI_Type_get_envelope\fP returns information on
the number and type of input arguments used in the call that created the
data type. The number\-of\-arguments values returned can be used to
provide sufficiently large arrays in the decoding routine
\fI\%MPI_Type_get_contents\fP\&. This call and the meaning of the returned values
is described below. The combiner reflects the MPI data type constructor
call that was used in creating \fIdatatype\fP\&.
.SH NOTES
.sp
These are the values that can be returned in \fIcombiner\fP and their
associated calls:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Values                          Associated Calls

MPI_COMBINER_NAMED              a named predefined data type
MPI_COMBINER_DUP                MPI_Type_dup
MPI_COMBINER_CONTIGUOUS         MPI_Type_contiguous
MPI_COMBINER_VECTOR             MPI_Type_vector
MPI_COMBINER_HVECTOR            MPI_Type_hvector
                                  and MPI_Type_create_hvector
MPI_COMBINER_INDEXED            MPI_Type_indexed
MPI_COMBINER_HINDEXED           MPI_Type_hindexed
                                  and MPI_Type_create_hindexed
MPI_COMBINER_INDEXED_BLOCK      MPI_Type_create_indexed_block
MPI_COMBINER_STRUCT             MPI_Type_struct
                                  and MPI_Type_create_struct
MPI_COMBINER_SUBARRAY           MPI_Type_create_subarray
MPI_COMBINER_DARRAY             MPI_Type_create_darray
MPI_COMBINER_F90_REAL           MPI_Type_create_f90_real
MPI_COMBINER_F90_COMPLEX        MPI_Type_create_f90_complex
MPI_COMBINER_F90_INTEGER        MPI_Type_create_f90_integer
MPI_COMBINER_RESIZED            MPI_Type_create_resized
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If \fIcombiner\fP is MPI_COMBINER_NAMED, then \fIdatatype\fP is a named
predefined data type.
.sp
The actual arguments used in the creation call for a data type can be
obtained from the call \fI\%MPI_Type_get_contents\fP\&.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Type_get_contents\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

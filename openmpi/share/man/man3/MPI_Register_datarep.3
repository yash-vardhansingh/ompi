.\" Man page generated from reStructuredText.
.
.TH "MPI_REGISTER_DATAREP" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Register_datarep\fP — Defines data representation.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Register_datarep(const char *datarep,
     MPI_Datarep_conversion_function *read_conversion_fn,
     MPI_Datarep_conversion_function *write_conversion_fn,
     MPI_Datarep_extent_function *dtype_file_extent_fn,
     void *extra_state)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_REGISTER_DATAREP(DATAREP, READ_CONVERSION_FN,
     WRITE_CONVERSION_FN, DTYPE_FILE_EXTENT_FN,
     EXTRA_STATE, IERROR)
     CHARACTER*(*)   DATAREP
     EXTERNAL        READ_CONVERSION_FN, WRITE_CONVERSION_FN, DTYPE_FILE_EXTENT_FN
     INTEGER IERROR
     INTEGER(KIND=MPI_ADDRESS_KIND)  EXTRA_STATE
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Register_datarep(datarep, read_conversion_fn, write_conversion_fn,
             dtype_file_extent_fn, extra_state, ierror)
     CHARACTER(LEN=*), INTENT(IN) :: datarep
     PROCEDURE(MPI_Datarep_conversion_function) :: read_conversion_fn
     PROCEDURE(MPI_Datarep_conversion_function) :: write_conversion_fn
     PROCEDURE(MPI_Datarep_extent_function) :: dtype_file_extent_fn
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBdatarep\fP: Data representation identifier (string).
.IP \(bu 2
\fBread_conversion_fn\fP: Function invoked to convert from file representation to native representation (function).
.IP \(bu 2
\fBwrite_conversion_fn\fP: Function invoked to convert from native representation to file representation (function).
.IP \(bu 2
\fBdtype_file_extent_fn\fP: Function invoked to get the extent of a data type as represented in the file (function).
.IP \(bu 2
\fBextra_state\fP: Extra state.
.UNINDENT
.SH OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Register_datarep\fP defines a data representation. It associates the
data representation’s identifier (a string) with the functions that
convert from file representation to the native representation and vice
versa, with the function that gets the extent of a data type as
represented in the file, as well as with “extra state,” which is used
for passing arguments. Once a data representation has been registered
using this routine, you may specify its identifier as an argument to
\fI\%MPI_File_set_view\fP, causing subsequent data\-access operations to call the
specified conversion functions.
.sp
The call associates \fIread_conversion_fn\fP, \fIwrite_conversion_fn\fP, and
\fIdtype_file_extent_fn\fP with the data representation identifier
\fIdatarep\fP\&. \fIdatarep\fP can then be used as an argument to
\fI\%MPI_File_set_view\fP, causing subsequent data access operations to call the
conversion functions to convert all data items accessed between file
data representation and native representation. \fI\%MPI_Register_datarep\fP is a
local operation and only registers the data representation for the
calling MPI process. If \fIdatarep\fP is already defined, an error in the
error class MPI_ERR_DUP_DATAREP is raised using the default file error
handler. The length of a data representation string is limited to the
value of MPI_MAX_DATAREP_STRING. MPI_MAX_DATAREP_STRING must have a
value of at least 64. No routines are provided to delete data
representations and free the associated resources; it is not expected
that an application will generate them in significant numbers.
.SH NOTES
.sp
The Fortran version of each MPI I/O routine includes a final argument,
IERROR, which is not defined in the PARAMETERS sections. This argument
is used to return the error status of the routine in the manner typical
for Fortran library routines.
.sp
The C version of each routine returns an error status as an integer
return value.
.sp
Error classes are found in mpi.h (for C) and mpif.h (for Fortran).
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

.\" Man page generated from reStructuredText.
.
.TH "MPI_COMM_SPAWN_MULTIPLE" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Comm_spawn_multiple\fP — Spawns multiple binaries, or the same
binary with multiple sets of arguments.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Comm_spawn_multiple(int count, char *array_of_commands[],
     char **array_of_argv[], const int array_of_maxprocs[], const MPI_Info
     array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm,
     int array_of_errcodes[])
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_COMM_SPAWN_MULTIPLE(COUNT, ARRAY_OF_COMMANDS, ARRAY_OF_ARGV,
     ARRAY_OF_MAXPROCS, ARRAY_OF_INFO, ROOT, COMM, INTERCOMM,
     ARRAY_OF_ERRCODES, IERROR)
     INTEGER COUNT, ARRAY_OF_INFO(*), ARRAY_OF_MAXPROCS(*), ROOT,
             COMM, INTERCOMM, ARRAY_OF_ERRCODES(*), IERROR
     CHARACTER*(*) ARRAY_OF_COMMANDS(*), ARRAY_OF_ARGV(COUNT, *)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Comm_spawn_multiple(count, array_of_commands, array_of_argv,
     array_of_maxprocs, array_of_info, root, comm, intercomm,
             array_of_errcodes, ierror)
     INTEGER, INTENT(IN) :: count, array_of_maxprocs(*), root
     CHARACTER(LEN=*), INTENT(IN) :: array_of_commands(*)
     CHARACTER(LEN=*), INTENT(IN) :: array_of_argv(count, *)
     TYPE(MPI_Info), INTENT(IN) :: array_of_info(*)
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Comm), INTENT(OUT) :: intercomm
     INTEGER :: array_of_errcodes(*)
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcount\fP: Number of commands (positive integer, significant to MPI only at \fIroot\fP — see NOTES).
.IP \(bu 2
\fBarray_of_commands\fP: Programs to be executed (array of strings, significant only at \fIroot\fP).
.IP \(bu 2
\fBarray_of_argv\fP: Arguments for \fIcommands\fP (array of array of strings, significant only at \fIroot\fP).
.IP \(bu 2
\fBarray_of_maxprocs\fP: Maximum number of processes to start for each command (array of integers, significant only at \fIroot\fP).
.IP \(bu 2
\fBarray_of_info\fP: Info objects telling the runtime system where and how to start processes (array of handles, significant only at \fIroot\fP).
.IP \(bu 2
\fBroot\fP: Rank of process in which previous arguments are examined (integer).
.IP \(bu 2
\fBcomm\fP: Intracommunicator containing group of spawning processes (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBintercomm\fP: Intercommunicator between original group and the newly spawned group (handle).
.IP \(bu 2
\fBarray_of_errcodes\fP: One code per process (array of integers).
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Comm_spawn_multiple\fP is identical to \fI\%MPI_Comm_spawn\fP except that it
can specify multiple executables. The first argument, \fIcount\fP, indicates
the number of executables. The next three arguments are arrays of the
corresponding arguments in \fI\%MPI_Comm_spawn\fP\&. The next argument,
\fIarray_of_info\fP, is an array of \fIinfo\fP arguments, one for each
executable. See the INFO ARGUMENTS section for more information.
.sp
For the Fortran version of \fIarray_of_argv\fP, the element
\fIarray_of_argv\fP(i,j) is the jth argument to command number i.
.sp
In any language, an application may use the constant MPI_ARGVS_NULL
(which is likely to be \fB(char **)0\fP in C) to specify that no arguments
should be passed to any commands. The effect of setting individual
elements of \fIarray_of_argv\fP to MPI_ARGV_NULL is not defined. To specify
arguments for some commands but not others, the commands without
arguments should have a corresponding \fIargv\fP whose first element is null
\fB((char *)0\fP in C and empty string in Fortran).
.sp
All of the spawned processes have the same MPI_COMM_WORLD. Their ranks
in MPI_COMM_WORLD correspond directly to the order in which the commands
are specified in \fI\%MPI_Comm_spawn_multiple\fP\&. Assume that m1 processes are
generated by the first command, m2 by the second, etc. The processes
corresponding to the first command have ranks 0, 1,…, m1\-1. The
processes in the second command have ranks m1, m1+1, …, m1+m2\-1. The
processes in the third have ranks m1+m2, m1+m2+1, …, m1+m2+m3\-1, etc.
.sp
The \fIarray_of_errcodes\fP argument is 1\-dimensional array of size
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
 _ count
\e       n ,
/_ i=1   i
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where i is the ith element of \fIarray_of_maxprocs\fP\&. Command number \fIi\fP
corresponds to the i contiguous slots in this array from element
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
                 _              _
 _ i\-1          |   _ i          |
\e       n ,  to |  \e      n      | \-1
/_ j=1   i      |  /_ j=1  j     |
                |_              _|
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Error codes are treated as for \fI\%MPI_Comm_spawn\fP\&.
.SH INFO ARGUMENTS
.sp
The following keys for \fIinfo\fP are recognized in “#PACKAGE_NAME#”. (The
reserved values mentioned in Section 5.3.4 of the MPI\-2 standard are not
implemented.)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Key                    Type     Description
\-\-\-                    \-\-\-\-     \-\-\-\-\-\-\-\-\-\-\-

host                   char *   Comma\-separated list of hosts on which
                                the processes should be spawned.  See
                                the orte_host man page for an
                                explanation of how this will be used.
hostfile               char *   Hostfile containing the hosts on which
                                the processes are to be spawned. See
                                the orte_hostfile man page for
                                an explanation of how this will be
                                used.
add\-host               char *   Add the specified hosts to the list of
                                hosts known to this job and use it for
                                the associated processes. This will be
                                used similarly to the \-host option.
add\-hostfile           char *   Hostfile containing hosts to be added
                                to the list of hosts known to this job
                                and use it for the associated
                                process. This will be used similarly
                                to the \-hostfile option.
wdir                   char *   Directory where the executable is
                                located. If files are to be
                                pre\-positioned, then this location is
                                the desired working directory at time
                                of execution \- if not specified, then
                                it will automatically be set to
                                ompi_preload_files_dest_dir.
ompi_prefix            char *   Same as the \-\-prefix command line
                                argument to mpirun.
ompi_preload_binary    bool     If set to true, pre\-position the
                                specified executable onto the remote
                                host. A destination directory must
                                also be provided.
ompi_preload_files     char *   A comma\-separated list of files that
                                are to be pre\-positioned in addition
                                to the executable.  Note that this
                                option does not depend upon
                                ompi_preload_binary \- files can
                                be moved to the target even if an
                                executable is not moved.
ompi_stdin_target      char *   Comma\-delimited list of ranks to
                                receive stdin when forwarded.
ompi_non_mpi           bool     If set to true, launching a non\-MPI
                                application; the returned communicator
                                will be MPI_COMM_NULL. Failure to set
                                this flag when launching a non\-MPI
                                application will cause both the child
                                and parent jobs to "hang".
ompi_param             char *   Pass an OMPI MCA parameter to the
                                child job.  If that parameter already
                                exists in the environment, the value
                                will be overwritten by the provided
                                value.
mapper                 char *   Mapper to be used for this job
map_by                 char *   Mapping directive indicating how
                                processes are to be mapped (slot,
                                node, socket, etc.).
rank_by                char *   Ranking directive indicating how
                                processes are to be ranked (slot,
                                node, socket, etc.).
bind_to                char *   Binding directive indicating how
                                processes are to be bound (core, slot,
                                node, socket, etc.).
path                   char *   List of directories to search for
                                the executable
npernode               char *   Number of processes to spawn on
                                each node of the allocation
pernode                bool     Equivalent to npernode of 1
ppr                    char *   Spawn specified number of processes
                                on each of the identified object type
env                    char *   Newline\-delimited list of envars to
                                be passed to the spawned procs
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fIbool\fP info keys are actually strings but are evaluated as follows: if
the string value is a number, it is converted to an integer and cast to
a boolean (meaning that zero integers are false and non\-zero values are
true). If the string value is (case\-insensitive) “yes” or “true”, the
boolean is true. If the string value is (case\-insensitive) “no” or
“false”, the boolean is false. All other string values are unrecognized,
and therefore false.
.sp
Note that if any of the info handles have \fIompi_non_mpi\fP set to true,
then all info handles must have it set to true. If some are set to true,
but others are set to false (or are unset), MPI_ERR_INFO will be
returned.
.sp
Note that in “#PACKAGE_NAME#”, the first array location in
\fIarray_of_info\fP is applied to all the commands in \fIarray_of_commands\fP\&.
.SH NOTES
.sp
The argument \fIcount\fP is interpreted by MPI only at the root, as is
\fIarray_of_argv\fP\&. Since the leading dimension of \fIarray_of_argv\fP is
\fIcount\fP, a nonpositive value of \fIcount\fP at a nonroot node could
theoretically cause a runtime bounds check error, even though
\fIarray_of_argv\fP should be ignored by the subroutine. If this happens,
you should explicitly supply a reasonable value of \fIcount\fP on the
nonroot nodes.
.sp
Similar to \fI\%MPI_Comm_spawn\fP, it is the application’s responsibility to
terminate each individual set of argv in the \fIarray_of_argv\fP argument.
In C, each argv array is terminated by a NULL pointer. In Fortran, each
argv array is terminated by an empty string (note that compilers will
not automatically insert this blank string; the application must ensure
to have enough space for an empty string entry as the last element of
the array).
.sp
Other restrictions apply to the \fIarray_of_argv\fP parameter; see
\fI\%MPI_Comm_spawn\fP’s description of the \fIargv\fP parameter for more
details.
.sp
MPI\-3.1 implies (but does not directly state) that the argument
\fIarray_of_commands\fP must be an array of strings of length \fIcount\fP\&.
Unlike the \fIarray_of_argv\fP parameter, \fIarray_of_commands\fP does not need
to be terminated with a NULL pointer in C or a blank string in Fortran.
Older versions of Open MPI required that \fIarray_of_commands\fP be
terminated with a blank string in Fortran; that is no longer required in
this version of Open MPI.
.sp
Calling \fI\%MPI_Comm_spawn\fP many times would create many sets of children
with different MPI_COMM_WORLDs, whereas \fI\%MPI_Comm_spawn_multiple\fP creates
children with a single MPI_COMM_WORLD, so the two methods are not
completely equivalent. Also if you need to spawn multiple executables,
you may get better performance by using \fI\%MPI_Comm_spawn_multiple\fP instead
of calling \fI\%MPI_Comm_spawn\fP several times.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_spawn\fP
.IP \(bu 2
\fI\%MPI_Comm_get_parent\fP
.IP \(bu 2
\fI\%mpirun(1)\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.

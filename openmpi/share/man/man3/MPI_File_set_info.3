.\" Man page generated from reStructuredText.
.
.TH "MPI_FILE_SET_INFO" "3" "Jul 18, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_File_set_info\fP — Sets new values for hints (collective).
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_File_set_info(MPI_File fh, MPI_Info info)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_FILE_SET_INFO(FH, INFO, IERROR)
     INTEGER FH, INFO, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_File_set_info(fh, info, ierror)
     TYPE(MPI_File), INTENT(IN) :: fh
     TYPE(MPI_Info), INTENT(IN) :: info
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT/OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBfh\fP: File handle (handle).
.UNINDENT
.SH INPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBinfo\fP: Info object (handle).
.UNINDENT
.SH OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBierror\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_File_set_info\fP is a collective routine that sets new values
for the hints of the file associated with \fIfh\fP\&. These hints are set
for each file, using the \fI\%MPI_File_open\fP, \fI\%MPI_File_delete\fP,
\fI\%MPI_File_set_view\fP, and \fI\%MPI_File_set_info\fP routines. The
opaque \fIinfo\fP object, which allows you to provide hints for
optimization of your code, may be different on each process, but some
\fIinfo\fP entries are required to be the same on all processes: In these
cases, they must appear with the same value in each process’s info
object. See the \fI\%HINTS section\fP
for a list of hints that can be set.
.SH HINTS
.sp
The following hints can be used as values for the \fIinfo\fP argument.
.sp
\fBSETTABLE HINTS\fP
.INDENT 0.0
.IP \(bu 2
\fBshared_file_timeout\fP: Amount of time (in seconds) to wait for
access to the shared file pointer before exiting with
\fBMPI_ERR_TIMEDOUT\fP\&.
.IP \(bu 2
\fBrwlock_timeout\fP: Amount of time (in seconds) to wait for
obtaining a read or write lock on a contiguous chunk of a UNIX file
before exiting with \fBMPI_ERR_TIMEDOUT\fP\&.
.IP \(bu 2
\fBnoncoll_read_bufsize\fP: Maximum size of the buffer used by MPI I/O
to satisfy read requests in the noncollective data\-access
routines.
.sp
\fBNOTE:\fP
.INDENT 2.0
.INDENT 3.5
A buffer size smaller than the distance (in bytes) in a
UNIX file between the first byte and the last byte of the
access request causes MPI I/O to iterate and perform
multiple UNIX \fBread()\fP or \fBwrite()\fP calls. If the request
includes multiple noncontiguous chunks of data, and the
buffer size is greater than the size of those chunks, then
the UNIX \fBread()\fP or \fBwrite()\fP (made at the MPI I/O level)
will access data not requested by this process in order to
reduce the total number of \fBwrite()\fP calls made. If this is
not desirable behavior, you should reduce this buffer size
to equal the size of the contiguous chunks within the
aggregate request.
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBnoncoll_write_bufsize\fP: Maximum size of the buffer used by MPI
I/O to satisfy write requests in the noncollective data\-access
routines.
.sp
See the above note in \fBnoncoll_read_bufsize\fP\&.
.IP \(bu 2
\fBcoll_read_bufsize\fP: Maximum size of the buffer used by MPI I/O to
satisfy read requests in the collective data\-access routines.
.sp
See the above note in \fBnoncoll_read_bufsize\fP\&.
.IP \(bu 2
\fBcoll_write_bufsize\fP: Maximum size of the buffer used by MPI I/O
to satisfy write requests in the collective data\-access
routines.
.sp
See the above note in \fBnoncoll_read_bufsize\fP\&.
.IP \(bu 2
\fBmpiio_concurrency\fP: (boolean) controls whether nonblocking I/O
routines can bind an extra thread to an LWP.
.IP \(bu 2
\fBmpiio_coll_contiguous\fP: (boolean) controls whether subsequent
collective data accesses will request collectively contiguous
regions of the file.
.sp
\fBNON\-SETTABLE HINTS\fP
.IP \(bu 2
\fBfilename\fP: Access this hint to get the name of the file.
.UNINDENT
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the return result
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler associated
with the communication object (e.g., communicator, window, file) is called.
If no communication object is associated with the MPI call, then the call is
considered attached to MPI_COMM_SELF and will call the associated MPI error
handler. When MPI_COMM_SELF is not initialized (i.e., before
\fI\%MPI_Init\fP/\fI\%MPI_Init_thread\fP, after \fI\%MPI_Finalize\fP, or when using the Sessions
Model exclusively) the error raises the initial error handler. The initial
error handler can be changed by calling \fI\%MPI_Comm_set_errhandler\fP on
MPI_COMM_SELF when using the World model, or the mpi_initial_errhandler CLI
argument to mpiexec or info key to \fI\%MPI_Comm_spawn\fP/\fI\%MPI_Comm_spawn_multiple\fP\&.
If no other appropriate error handler has been set, then the MPI_ERRORS_RETURN
error handler is called for MPI I/O functions and the MPI_ERRORS_ABORT error
handler is called for all other MPI functions.
.sp
Open MPI includes three predefined error handlers that can be used:
.INDENT 0.0
.IP \(bu 2
\fBMPI_ERRORS_ARE_FATAL\fP
Causes the program to abort all connected MPI processes.
.IP \(bu 2
\fBMPI_ERRORS_ABORT\fP
An error handler that can be invoked on a communicator,
window, file, or session. When called on a communicator, it
acts as if \fI\%MPI_Abort\fP was called on that communicator. If
called on a window or file, acts as if \fI\%MPI_Abort\fP was called
on a communicator containing the group of processes in the
corresponding window or file. If called on a session,
aborts only the local process.
.IP \(bu 2
\fBMPI_ERRORS_RETURN\fP
Returns an error code to the application.
.UNINDENT
.sp
MPI applications can also implement their own error handlers by calling:
.INDENT 0.0
.IP \(bu 2
\fI\%MPI_Comm_create_errhandler\fP then \fI\%MPI_Comm_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_File_create_errhandler\fP then \fI\%MPI_File_set_errhandler\fP
.IP \(bu 2
\fI\%MPI_Session_create_errhandler\fP then \fI\%MPI_Session_set_errhandler\fP or at \fI\%MPI_Session_init\fP
.IP \(bu 2
\fI\%MPI_Win_create_errhandler\fP then \fI\%MPI_Win_set_errhandler\fP
.UNINDENT
.sp
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
See the \fI\%MPI man page\fP for a full list of \fI\%MPI error codes\fP\&.
.sp
See the Error Handling section of the MPI\-3.1 standard for
more information.
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.
